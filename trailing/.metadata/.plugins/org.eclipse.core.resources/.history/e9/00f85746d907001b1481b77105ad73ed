package com.reputation.trailing.controllers;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonParser.Feature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.reputation.trailing.TrailingException;
import com.reputation.trailing.models.NetAssetValue;
import com.reputation.trailing.models.Trailing;
import com.reputation.trailing.validators.IRequestValidator;

/**
 * 
 * @author ravitejab
 *
 */

@RestController
@RequestMapping("api/v1")
public class NetAssetValueController {

	private Logger logger = LoggerFactory.getLogger(NetAssetValueController.class);
	private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy", Locale.ENGLISH);

	@Autowired
	@Qualifier("trailingValidator")
	private IRequestValidator<Trailing> iValidator;

	@Value("${mfapi.api.url}")
	private String apiUrl;

	/**
	 * 
	 * @param trailRequest
	 * @return {@link ResponseEntity}
	 */
	@GetMapping("/getTrailingReturns")
	public ResponseEntity<String> getTrailingReturnsForHorizon(@RequestBody final Trailing trailRequest) {

		String apiResponse = null;
		RestTemplate restTemplate = null;
		ObjectNode response = null;
		LocalDate today = LocalDate.now();
		ObjectMapper mapper = new ObjectMapper();
		
		try {
			restTemplate = new RestTemplate();
			response = mapper.createObjectNode();
			Trailing trailing = (Trailing) iValidator.validateReqParam(trailRequest);
			String finalUrl = apiUrl.concat("/").concat(trailing.getSchemeNumber()); // prepare final url with scheme no

			try { // get NAV details through api call
				apiResponse = restTemplate.exchange(finalUrl, HttpMethod.GET, getDefaultEntity(), String.class)
						.getBody();
			} catch (Exception e1) {
				logger.error("Exception in mfapi call", e1);
				return new ResponseEntity<String>(e1.getMessage(), HttpStatus.BAD_REQUEST);
			}
			if (apiResponse != null) {
				ArrayNode arrayNode = new ObjectMapper().createArrayNode();
				JsonNode rootNode = mapper.readTree(apiResponse);
				JsonNode internalNode = rootNode.path("data"); // get data field from response

				List<NetAssetValue> dataset = mapper.readerFor(new TypeReference<List<NetAssetValue>>() {
				}).readValue(internalNode); // convert jsonnode to list of objects

				Map<String, NetAssetValue> data = dataset.stream()
						.collect(Collectors.toMap(NetAssetValue::getRecordedDate, p -> p)); // Change list of objects to HashMap of date & NetAssetValue object usong streams 

				// Take initial date , i.e todays date of format dd-MM-yyyy
				String initialPoint = (today.getDayOfMonth() < 10 ? ("0" + today.getDayOfMonth())
						: today.getDayOfMonth()) + "-" + today.getMonthValue() + "-" + (today.getYear());

				for (int period = 0; period < (12 * trailing.getHorizon()); period++) { // now loop 12 months*no of horizons
					while (data.get(initialPoint) == null) { // if current date isn't in dataset then fetch next available date
						initialPoint = previousDateString(initialPoint);
					}
					double endNAV = Double.parseDouble(data.get(initialPoint).getNavValue()); // get its nav value

					int currMonth = today.getMonthValue();

					// get start date with a gap of current & investment period given
					String startDate = (today.getDayOfMonth() < 10 ? ("0" + today.getDayOfMonth())
							: today.getDayOfMonth()) + "-" + (currMonth < 10 ? ("0" + currMonth) : currMonth) + "-"
							+ (today.getYear() - trailing.getInvestmentPeriod()); 

					while (data.get(startDate) == null) { // if null loop to get next available
						startDate = previousDateString(startDate);
					}
					double startNAV = Double.parseDouble(data.get(startDate).getNavValue());

					// Prepare response
					ObjectNode nodeDetails = new ObjectMapper().createObjectNode();
					String month = today.getMonth() + "-" + (today.getYear());
					nodeDetails.put("month", month); 
					nodeDetails.put("end_date", initialPoint);
					nodeDetails.put("start_date", startDate);
					nodeDetails.put("returns", calculateNAVReturns(endNAV, startNAV, trailing.getHorizon())); // Calculate trailing returns value
					arrayNode.add(nodeDetails);

					today = today.minusMonths(1);
					currMonth = today.getMonthValue();
					initialPoint = (today.getDayOfMonth() < 10 ? ("0" + today.getDayOfMonth()) : today.getDayOfMonth())
							+ "-" + (currMonth < 10 ? ("0" + currMonth) : currMonth) + "-" + (today.getYear());

				}

				if (!arrayNode.isEmpty()) {
					response.put("status", "SUCCESS");
					response.put("data", arrayNode);
				}
				return new ResponseEntity<>(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(response),
						HttpStatus.OK);
			}

		} catch (TrailingException requestError) {
			response.put("status", "ERROR");
			response.put("errorMessage", requestError.getErrorMsg());
			response.put("errorCode", requestError.getErrorCode());
			return new ResponseEntity<String>(response.toPrettyString(), HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			response.put("status", "ERROR");
			response.put("message", e.getMessage());
		}
		return new ResponseEntity<String>(response.toPrettyString(), HttpStatus.INTERNAL_SERVER_ERROR);
	}

	/**
	 * 
	 * @param endNAV
	 * @param startNAV
	 * @param horizon
	 * @return trailing returns
	 * @formula (EndValue/StartValue)^(1/horizon)-1
	 */
	public static double calculateNAVReturns(double endNAV, double startNAV, int horizon) {
		double powVal = (double) 1 / horizon;
		double trailingVal = (double) endNAV / startNAV;
		double sum = (double) Math.pow(trailingVal, powVal) - 1;
		return (double) Math.round(sum * 100) / 100;
	}

	/**
	 * 
	 * @param dateString
	 * @return previousDate (String)
	 */
	public static String previousDateString(String dateString) {
		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String result = "";
		Date myDate = null;
		try {
			myDate = dateFormat.parse(dateString);
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(myDate);
			calendar.add(Calendar.DAY_OF_YEAR, -1);

			Date previousDate = calendar.getTime();
			result = dateFormat.format(previousDate);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return result;
	}

	/**
	 * 
	 * @return defaultEntity
	 */
	public HttpEntity<String> getDefaultEntity() {
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		HttpEntity<String> entity = new HttpEntity<String>(headers);

		return entity;
	}

}
